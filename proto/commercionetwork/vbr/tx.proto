syntax = "proto3";
package commercionetwork.commercionetwork.vbr;

// this line is used by starport scaffolding # proto/tx/import
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/commercionetwork/commercionetwork/x/vbr/types";

// Msg defines the Msg service.
service Msg {
    // this line is used by starport scaffolding # proto/tx/rpc
  rpc SetAutomaticWithdraw(MsgSetAutomaticWithdraw) returns (MsgSetAutomaticWithdrawResponse);
  rpc SetRewardRate(MsgSetRewardRate) returns (MsgSetRewardRateResponse);
  rpc IncrementBlockRewardsPool(MsgIncrementBlockRewardsPool) returns (MsgIncrementBlockRewardsPoolResponse);
}

// this line is used by starport scaffolding # proto/tx/message
message MsgIncrementBlockRewardsPool {
  string funder = 1 [(gogoproto.moretags) = "yaml:\"funder\""];
  repeated cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.moretags) = "yaml:\"amount\"", (gogoproto.nullable)   = false] ;
}

message MsgIncrementBlockRewardsPoolResponse {
}

message MsgSetRewardRate {
  string Government = 1 [(gogoproto.moretags) = "yaml:\"government\""];
  cosmos.base.v1beta1.DecProto RewardRate = 2 [(gogoproto.moretags) = "yaml:\"reward_rate\""] ;        //sdk.Dec
}

message MsgSetRewardRateResponse {
}

message MsgSetAutomaticWithdraw {
  string Government = 1 [(gogoproto.moretags) = "yaml:\"government\""];
  bool AutomaticWithdraw = 2 [(gogoproto.moretags) = "yaml:\"automatic_withdraw\""];
}

message MsgSetAutomaticWithdrawResponse {
}

