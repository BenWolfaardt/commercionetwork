// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commercionetwork/did/didDocument.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DidDocument struct {
	Context              []string              `protobuf:"bytes,1,rep,name=context,proto3" json:"context,omitempty"`
	ID                   string                `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	VerificationMethod   []*VerificationMethod `protobuf:"bytes,3,rep,name=verificationMethod,proto3" json:"verificationMethod,omitempty"`
	Service              []*Service            `protobuf:"bytes,4,rep,name=service,proto3" json:"service,omitempty"`
	Authentication       []*VerificationMethod `protobuf:"bytes,5,rep,name=authentication,proto3" json:"authentication,omitempty"`
	AssertionMethod      []*VerificationMethod `protobuf:"bytes,6,rep,name=assertionMethod,proto3" json:"assertionMethod,omitempty"`
	CapabilityDelegation []*VerificationMethod `protobuf:"bytes,7,rep,name=capabilityDelegation,proto3" json:"capabilityDelegation,omitempty"`
	CapabilityInvocation []*VerificationMethod `protobuf:"bytes,8,rep,name=capabilityInvocation,proto3" json:"capabilityInvocation,omitempty"`
	KeyAgreement         []*VerificationMethod `protobuf:"bytes,9,rep,name=keyAgreement,proto3" json:"keyAgreement,omitempty"`
	Created              string                `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
	Updated              string                `protobuf:"bytes,11,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (m *DidDocument) Reset()         { *m = DidDocument{} }
func (m *DidDocument) String() string { return proto.CompactTextString(m) }
func (*DidDocument) ProtoMessage()    {}
func (*DidDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd464e9ab294857d, []int{0}
}
func (m *DidDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DidDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DidDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DidDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DidDocument.Merge(m, src)
}
func (m *DidDocument) XXX_Size() int {
	return m.Size()
}
func (m *DidDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_DidDocument.DiscardUnknown(m)
}

var xxx_messageInfo_DidDocument proto.InternalMessageInfo

func (m *DidDocument) GetContext() []string {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *DidDocument) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DidDocument) GetVerificationMethod() []*VerificationMethod {
	if m != nil {
		return m.VerificationMethod
	}
	return nil
}

func (m *DidDocument) GetService() []*Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *DidDocument) GetAuthentication() []*VerificationMethod {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (m *DidDocument) GetAssertionMethod() []*VerificationMethod {
	if m != nil {
		return m.AssertionMethod
	}
	return nil
}

func (m *DidDocument) GetCapabilityDelegation() []*VerificationMethod {
	if m != nil {
		return m.CapabilityDelegation
	}
	return nil
}

func (m *DidDocument) GetCapabilityInvocation() []*VerificationMethod {
	if m != nil {
		return m.CapabilityInvocation
	}
	return nil
}

func (m *DidDocument) GetKeyAgreement() []*VerificationMethod {
	if m != nil {
		return m.KeyAgreement
	}
	return nil
}

func (m *DidDocument) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *DidDocument) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

type VerificationMethod struct {
	ID         string       `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type       string       `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Controller string       `protobuf:"bytes,3,opt,name=Controller,proto3" json:"Controller,omitempty"`
	Value      []*types.Any `protobuf:"bytes,4,rep,name=Value,proto3" json:"Value,omitempty"`
	// Types that are valid to be assigned to VerificationMaterial:
	//	*VerificationMethod_PublicKeyJwk
	//	*VerificationMethod_PublicKeyMultibase
	VerificationMaterial isVerificationMethod_VerificationMaterial `protobuf_oneof:"verificationMaterial"`
	RelativeURL          bool                                      `protobuf:"varint,7,opt,name=relativeURL,proto3" json:"relativeURL,omitempty"`
}

func (m *VerificationMethod) Reset()         { *m = VerificationMethod{} }
func (m *VerificationMethod) String() string { return proto.CompactTextString(m) }
func (*VerificationMethod) ProtoMessage()    {}
func (*VerificationMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd464e9ab294857d, []int{1}
}
func (m *VerificationMethod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationMethod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationMethod.Merge(m, src)
}
func (m *VerificationMethod) XXX_Size() int {
	return m.Size()
}
func (m *VerificationMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationMethod.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationMethod proto.InternalMessageInfo

type isVerificationMethod_VerificationMaterial interface {
	isVerificationMethod_VerificationMaterial()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VerificationMethod_PublicKeyJwk struct {
	PublicKeyJwk *types.Any `protobuf:"bytes,5,opt,name=publicKeyJwk,proto3,oneof" json:"publicKeyJwk,omitempty"`
}
type VerificationMethod_PublicKeyMultibase struct {
	PublicKeyMultibase string `protobuf:"bytes,6,opt,name=publicKeyMultibase,proto3,oneof" json:"publicKeyMultibase,omitempty"`
}

func (*VerificationMethod_PublicKeyJwk) isVerificationMethod_VerificationMaterial()       {}
func (*VerificationMethod_PublicKeyMultibase) isVerificationMethod_VerificationMaterial() {}

func (m *VerificationMethod) GetVerificationMaterial() isVerificationMethod_VerificationMaterial {
	if m != nil {
		return m.VerificationMaterial
	}
	return nil
}

func (m *VerificationMethod) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *VerificationMethod) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VerificationMethod) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

func (m *VerificationMethod) GetValue() []*types.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *VerificationMethod) GetPublicKeyJwk() *types.Any {
	if x, ok := m.GetVerificationMaterial().(*VerificationMethod_PublicKeyJwk); ok {
		return x.PublicKeyJwk
	}
	return nil
}

func (m *VerificationMethod) GetPublicKeyMultibase() string {
	if x, ok := m.GetVerificationMaterial().(*VerificationMethod_PublicKeyMultibase); ok {
		return x.PublicKeyMultibase
	}
	return ""
}

func (m *VerificationMethod) GetRelativeURL() bool {
	if m != nil {
		return m.RelativeURL
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VerificationMethod) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VerificationMethod_PublicKeyJwk)(nil),
		(*VerificationMethod_PublicKeyMultibase)(nil),
	}
}

type Service struct {
	ID                       string                `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type                     string                `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Priority                 uint32                `protobuf:"varint,3,opt,name=Priority,proto3" json:"Priority,omitempty"`
	RecipientKeys            []string              `protobuf:"bytes,4,rep,name=RecipientKeys,proto3" json:"RecipientKeys,omitempty"`
	RoutingKeys              []string              `protobuf:"bytes,5,rep,name=RoutingKeys,proto3" json:"RoutingKeys,omitempty"`
	ServiceEndpoint          string                `protobuf:"bytes,6,opt,name=serviceEndpoint,proto3" json:"serviceEndpoint,omitempty"`
	Accept                   []string              `protobuf:"bytes,7,rep,name=Accept,proto3" json:"Accept,omitempty"`
	Properties               map[string]*types.Any `protobuf:"bytes,8,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RecipientKeysRelativeURL map[string]bool       `protobuf:"bytes,9,rep,name=recipientKeysRelativeURL,proto3" json:"recipientKeysRelativeURL,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RoutingKeysRelativeURL   map[string]bool       `protobuf:"bytes,10,rep,name=routingKeysRelativeURL,proto3" json:"routingKeysRelativeURL,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RelativeURL              bool                  `protobuf:"varint,11,opt,name=relativeURL,proto3" json:"relativeURL,omitempty"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd464e9ab294857d, []int{2}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Service.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return m.Size()
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Service) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Service) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Service) GetRecipientKeys() []string {
	if m != nil {
		return m.RecipientKeys
	}
	return nil
}

func (m *Service) GetRoutingKeys() []string {
	if m != nil {
		return m.RoutingKeys
	}
	return nil
}

func (m *Service) GetServiceEndpoint() string {
	if m != nil {
		return m.ServiceEndpoint
	}
	return ""
}

func (m *Service) GetAccept() []string {
	if m != nil {
		return m.Accept
	}
	return nil
}

func (m *Service) GetProperties() map[string]*types.Any {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Service) GetRecipientKeysRelativeURL() map[string]bool {
	if m != nil {
		return m.RecipientKeysRelativeURL
	}
	return nil
}

func (m *Service) GetRoutingKeysRelativeURL() map[string]bool {
	if m != nil {
		return m.RoutingKeysRelativeURL
	}
	return nil
}

func (m *Service) GetRelativeURL() bool {
	if m != nil {
		return m.RelativeURL
	}
	return false
}

func init() {
	proto.RegisterType((*DidDocument)(nil), "commercionetwork.commercionetwork.did.DidDocument")
	proto.RegisterType((*VerificationMethod)(nil), "commercionetwork.commercionetwork.did.VerificationMethod")
	proto.RegisterType((*Service)(nil), "commercionetwork.commercionetwork.did.Service")
	proto.RegisterMapType((map[string]*types.Any)(nil), "commercionetwork.commercionetwork.did.Service.PropertiesEntry")
	proto.RegisterMapType((map[string]bool)(nil), "commercionetwork.commercionetwork.did.Service.RecipientKeysRelativeURLEntry")
	proto.RegisterMapType((map[string]bool)(nil), "commercionetwork.commercionetwork.did.Service.RoutingKeysRelativeURLEntry")
}

func init() {
	proto.RegisterFile("commercionetwork/did/didDocument.proto", fileDescriptor_bd464e9ab294857d)
}

var fileDescriptor_bd464e9ab294857d = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4b, 0x6b, 0xeb, 0x46,
	0x14, 0xb6, 0xec, 0xf8, 0x75, 0x9c, 0x47, 0x19, 0x4c, 0x50, 0x5d, 0xea, 0x9a, 0xd0, 0x16, 0xd3,
	0x85, 0x5c, 0xda, 0x4d, 0x9a, 0x45, 0x21, 0xa9, 0x03, 0x71, 0x1e, 0x10, 0x26, 0x6d, 0x16, 0x85,
	0x16, 0x64, 0xe9, 0x44, 0x19, 0x2c, 0x6b, 0xc4, 0x68, 0xe4, 0x44, 0xdb, 0xae, 0xba, 0xbc, 0x7f,
	0xe2, 0xee, 0xee, 0x0f, 0xb9, 0xcb, 0x70, 0x57, 0x77, 0x79, 0x49, 0xfe, 0xc8, 0x45, 0x23, 0x39,
	0x96, 0x5f, 0x21, 0xc6, 0x77, 0x11, 0x98, 0xf3, 0x98, 0xef, 0x3b, 0xf3, 0xe5, 0x7c, 0x46, 0xf0,
	0xa3, 0xc5, 0x87, 0x43, 0x14, 0x16, 0xe3, 0x1e, 0xca, 0x3b, 0x2e, 0x06, 0x1d, 0x9b, 0xd9, 0xf1,
	0x5f, 0x97, 0x5b, 0xe1, 0x10, 0x3d, 0x69, 0xf8, 0x82, 0x4b, 0x4e, 0x7e, 0x98, 0xed, 0x33, 0xe6,
	0x12, 0x36, 0xb3, 0x1b, 0x5f, 0x3b, 0x9c, 0x3b, 0x2e, 0x76, 0xd4, 0xa5, 0x7e, 0x78, 0xd3, 0x31,
	0xbd, 0x28, 0x41, 0x68, 0x7c, 0x37, 0x5b, 0x92, 0x6c, 0x88, 0x81, 0x34, 0x87, 0x7e, 0xda, 0x50,
	0x77, 0xb8, 0xc3, 0xd5, 0xb1, 0x13, 0x9f, 0x92, 0xec, 0xde, 0xdb, 0x12, 0xd4, 0xba, 0x93, 0x71,
	0x88, 0x0e, 0x65, 0x8b, 0x7b, 0x12, 0xef, 0xa5, 0xae, 0xb5, 0x0a, 0xed, 0x2a, 0x1d, 0x87, 0x64,
	0x1b, 0xf2, 0xbd, 0xae, 0x9e, 0x6f, 0x69, 0xed, 0x2a, 0xcd, 0xf7, 0xba, 0x84, 0x01, 0x19, 0xa1,
	0x60, 0x37, 0xcc, 0x32, 0x25, 0xe3, 0xde, 0x05, 0xca, 0x5b, 0x6e, 0xeb, 0x85, 0x56, 0xa1, 0x5d,
	0xfb, 0xe5, 0x37, 0xe3, 0x55, 0xef, 0x31, 0xae, 0xe7, 0x00, 0xe8, 0x02, 0x50, 0x72, 0x02, 0xe5,
	0x00, 0xc5, 0x88, 0x59, 0xa8, 0x6f, 0x28, 0x7c, 0xe3, 0x95, 0xf8, 0x57, 0xc9, 0x2d, 0x3a, 0xbe,
	0x4e, 0x4c, 0xd8, 0x36, 0x43, 0x79, 0x8b, 0x9e, 0x4c, 0x19, 0xf4, 0xe2, 0xba, 0x03, 0xcf, 0x00,
	0x12, 0x0b, 0x76, 0xcc, 0x20, 0x40, 0x91, 0x11, 0xa5, 0xb4, 0x2e, 0xc7, 0x2c, 0x22, 0x19, 0x42,
	0xdd, 0x32, 0x7d, 0xb3, 0xcf, 0x5c, 0x26, 0xa3, 0x2e, 0xba, 0xe8, 0x24, 0xaf, 0x29, 0xaf, 0xcb,
	0xb4, 0x10, 0x76, 0x9a, 0xae, 0xe7, 0x8d, 0x78, 0x2a, 0x5e, 0xe5, 0x0b, 0xd2, 0x4d, 0x60, 0xc9,
	0x3f, 0xb0, 0x39, 0xc0, 0xe8, 0xd0, 0x11, 0x88, 0xf1, 0x52, 0xea, 0xd5, 0x75, 0x69, 0xa6, 0xe0,
	0xd4, 0x8e, 0x0b, 0x34, 0x25, 0xda, 0x3a, 0xa8, 0x75, 0x1e, 0x87, 0x71, 0x25, 0xf4, 0x6d, 0x55,
	0xa9, 0x25, 0x95, 0x34, 0xdc, 0x7b, 0x97, 0x07, 0x32, 0x0f, 0x9c, 0x9a, 0x42, 0x7b, 0x36, 0x05,
	0x81, 0x8d, 0x3f, 0x23, 0x1f, 0x53, 0x9b, 0xa8, 0x33, 0x69, 0x02, 0xfc, 0xc1, 0x3d, 0x29, 0xb8,
	0xeb, 0xa2, 0xd0, 0x0b, 0xaa, 0x92, 0xc9, 0x90, 0x9f, 0xa0, 0x78, 0x6d, 0xba, 0xe1, 0x78, 0xb7,
	0xeb, 0x46, 0xe2, 0x64, 0x63, 0xec, 0x64, 0xe3, 0xd0, 0x8b, 0x68, 0xd2, 0x42, 0x0e, 0x60, 0xd3,
	0x0f, 0xfb, 0x2e, 0xb3, 0xce, 0x30, 0x3a, 0xbd, 0x1b, 0xe8, 0xc5, 0x96, 0xb6, 0xec, 0xca, 0x49,
	0x8e, 0x4e, 0xf5, 0x92, 0x9f, 0x81, 0x3c, 0xc7, 0x17, 0xa1, 0x2b, 0x59, 0xdf, 0x0c, 0x50, 0x2f,
	0xc5, 0xf3, 0x9c, 0xe4, 0xe8, 0x82, 0x1a, 0x69, 0x41, 0x4d, 0xa0, 0x6b, 0x4a, 0x36, 0xc2, 0xbf,
	0xe8, 0xb9, 0x5e, 0x6e, 0x69, 0xed, 0x0a, 0xcd, 0xa6, 0x8e, 0x76, 0xa1, 0x3e, 0xe5, 0x57, 0x53,
	0xa2, 0x60, 0xa6, 0xbb, 0xf7, 0xa1, 0x04, 0xe5, 0xd4, 0x7c, 0x8b, 0x34, 0x92, 0x19, 0x8d, 0xe2,
	0x33, 0x69, 0x40, 0xe5, 0x52, 0x30, 0x2e, 0x98, 0x8c, 0x94, 0x42, 0x5b, 0xf4, 0x39, 0x26, 0xdf,
	0xc3, 0x16, 0x45, 0x8b, 0xf9, 0x0c, 0x3d, 0x79, 0x86, 0x51, 0xa0, 0x74, 0xaa, 0xd2, 0xe9, 0x64,
	0x3c, 0x2b, 0xe5, 0xa1, 0x64, 0x9e, 0xa3, 0x7a, 0x8a, 0xaa, 0x27, 0x9b, 0x22, 0x6d, 0xd8, 0x49,
	0x7f, 0x06, 0x8e, 0x3d, 0xdb, 0xe7, 0xcc, 0x93, 0xc9, 0xe3, 0xe9, 0x6c, 0x9a, 0xec, 0x42, 0xe9,
	0xd0, 0xb2, 0xd0, 0x97, 0xca, 0x4f, 0x55, 0x9a, 0x46, 0xe4, 0x5f, 0x80, 0x4b, 0xc1, 0xfd, 0xd8,
	0x89, 0x18, 0xa4, 0xcb, 0xff, 0xfb, 0x6a, 0x3f, 0x45, 0xc6, 0x04, 0xe0, 0xd8, 0x93, 0x22, 0xa2,
	0x19, 0x44, 0xf2, 0xbf, 0x06, 0xba, 0xc8, 0xbe, 0x8a, 0x66, 0xd4, 0x4f, 0x4c, 0x70, 0xbe, 0x22,
	0x1d, 0x5d, 0x02, 0x97, 0x90, 0x2f, 0x65, 0x23, 0xff, 0x69, 0xb0, 0x2b, 0x26, 0xe2, 0x65, 0x07,
	0x01, 0x35, 0xc8, 0xe9, 0xaa, 0x83, 0x2c, 0x04, 0x4b, 0xc6, 0x58, 0xc2, 0x34, 0xbb, 0x7f, 0xb5,
	0xb9, 0xfd, 0x6b, 0x5c, 0xc1, 0xce, 0x8c, 0xa0, 0xe4, 0x2b, 0x28, 0x0c, 0x30, 0x4a, 0xf7, 0x2d,
	0x3e, 0xc6, 0x06, 0x1b, 0x29, 0x83, 0xe5, 0x97, 0xbb, 0x85, 0x26, 0x2d, 0x07, 0xf9, 0x7d, 0xad,
	0x71, 0x06, 0xdf, 0xbe, 0x28, 0xdb, 0x02, 0x8a, 0x7a, 0x96, 0xa2, 0x92, 0x05, 0xeb, 0xc1, 0x37,
	0x2f, 0x3c, 0x7d, 0x15, 0xa8, 0x23, 0xfa, 0xfe, 0xb1, 0xa9, 0x3d, 0x3c, 0x36, 0xb5, 0x4f, 0x8f,
	0x4d, 0xed, 0xcd, 0x53, 0x33, 0xf7, 0xf0, 0xd4, 0xcc, 0x7d, 0x7c, 0x6a, 0xe6, 0xfe, 0xde, 0x77,
	0x98, 0xbc, 0x0d, 0xfb, 0xf1, 0x7f, 0xa0, 0x33, 0xf7, 0xc5, 0x31, 0x97, 0xb8, 0x57, 0x1f, 0x21,
	0xb1, 0xef, 0x82, 0x7e, 0x49, 0x89, 0xf0, 0xeb, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x08,
	0x89, 0x23, 0xa9, 0x08, 0x00, 0x00,
}

func (m *DidDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DidDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DidDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Updated) > 0 {
		i -= len(m.Updated)
		copy(dAtA[i:], m.Updated)
		i = encodeVarintDidDocument(dAtA, i, uint64(len(m.Updated)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Created) > 0 {
		i -= len(m.Created)
		copy(dAtA[i:], m.Created)
		i = encodeVarintDidDocument(dAtA, i, uint64(len(m.Created)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.KeyAgreement) > 0 {
		for iNdEx := len(m.KeyAgreement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyAgreement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CapabilityInvocation) > 0 {
		for iNdEx := len(m.CapabilityInvocation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CapabilityInvocation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CapabilityDelegation) > 0 {
		for iNdEx := len(m.CapabilityDelegation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CapabilityDelegation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.AssertionMethod) > 0 {
		for iNdEx := len(m.AssertionMethod) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssertionMethod[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Authentication) > 0 {
		for iNdEx := len(m.Authentication) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Authentication[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Service) > 0 {
		for iNdEx := len(m.Service) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Service[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.VerificationMethod) > 0 {
		for iNdEx := len(m.VerificationMethod) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VerificationMethod[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintDidDocument(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Context) > 0 {
		for iNdEx := len(m.Context) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Context[iNdEx])
			copy(dAtA[i:], m.Context[iNdEx])
			i = encodeVarintDidDocument(dAtA, i, uint64(len(m.Context[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VerificationMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationMethod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationMethod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelativeURL {
		i--
		if m.RelativeURL {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.VerificationMaterial != nil {
		{
			size := m.VerificationMaterial.Size()
			i -= size
			if _, err := m.VerificationMaterial.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintDidDocument(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDidDocument(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintDidDocument(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerificationMethod_PublicKeyJwk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationMethod_PublicKeyJwk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublicKeyJwk != nil {
		{
			size, err := m.PublicKeyJwk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDidDocument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *VerificationMethod_PublicKeyMultibase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationMethod_PublicKeyMultibase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PublicKeyMultibase)
	copy(dAtA[i:], m.PublicKeyMultibase)
	i = encodeVarintDidDocument(dAtA, i, uint64(len(m.PublicKeyMultibase)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Service) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelativeURL {
		i--
		if m.RelativeURL {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.RoutingKeysRelativeURL) > 0 {
		for k := range m.RoutingKeysRelativeURL {
			v := m.RoutingKeysRelativeURL[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDidDocument(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDidDocument(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.RecipientKeysRelativeURL) > 0 {
		for k := range m.RecipientKeysRelativeURL {
			v := m.RecipientKeysRelativeURL[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDidDocument(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDidDocument(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Properties) > 0 {
		for k := range m.Properties {
			v := m.Properties[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDidDocument(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDidDocument(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDidDocument(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Accept) > 0 {
		for iNdEx := len(m.Accept) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accept[iNdEx])
			copy(dAtA[i:], m.Accept[iNdEx])
			i = encodeVarintDidDocument(dAtA, i, uint64(len(m.Accept[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ServiceEndpoint) > 0 {
		i -= len(m.ServiceEndpoint)
		copy(dAtA[i:], m.ServiceEndpoint)
		i = encodeVarintDidDocument(dAtA, i, uint64(len(m.ServiceEndpoint)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RoutingKeys) > 0 {
		for iNdEx := len(m.RoutingKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoutingKeys[iNdEx])
			copy(dAtA[i:], m.RoutingKeys[iNdEx])
			i = encodeVarintDidDocument(dAtA, i, uint64(len(m.RoutingKeys[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.RecipientKeys) > 0 {
		for iNdEx := len(m.RecipientKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RecipientKeys[iNdEx])
			copy(dAtA[i:], m.RecipientKeys[iNdEx])
			i = encodeVarintDidDocument(dAtA, i, uint64(len(m.RecipientKeys[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Priority != 0 {
		i = encodeVarintDidDocument(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDidDocument(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintDidDocument(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDidDocument(dAtA []byte, offset int, v uint64) int {
	offset -= sovDidDocument(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DidDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Context) > 0 {
		for _, s := range m.Context {
			l = len(s)
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovDidDocument(uint64(l))
	}
	if len(m.VerificationMethod) > 0 {
		for _, e := range m.VerificationMethod {
			l = e.Size()
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	if len(m.Service) > 0 {
		for _, e := range m.Service {
			l = e.Size()
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	if len(m.Authentication) > 0 {
		for _, e := range m.Authentication {
			l = e.Size()
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	if len(m.AssertionMethod) > 0 {
		for _, e := range m.AssertionMethod {
			l = e.Size()
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	if len(m.CapabilityDelegation) > 0 {
		for _, e := range m.CapabilityDelegation {
			l = e.Size()
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	if len(m.CapabilityInvocation) > 0 {
		for _, e := range m.CapabilityInvocation {
			l = e.Size()
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	if len(m.KeyAgreement) > 0 {
		for _, e := range m.KeyAgreement {
			l = e.Size()
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovDidDocument(uint64(l))
	}
	l = len(m.Updated)
	if l > 0 {
		n += 1 + l + sovDidDocument(uint64(l))
	}
	return n
}

func (m *VerificationMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovDidDocument(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDidDocument(uint64(l))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovDidDocument(uint64(l))
	}
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	if m.VerificationMaterial != nil {
		n += m.VerificationMaterial.Size()
	}
	if m.RelativeURL {
		n += 2
	}
	return n
}

func (m *VerificationMethod_PublicKeyJwk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicKeyJwk != nil {
		l = m.PublicKeyJwk.Size()
		n += 1 + l + sovDidDocument(uint64(l))
	}
	return n
}
func (m *VerificationMethod_PublicKeyMultibase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKeyMultibase)
	n += 1 + l + sovDidDocument(uint64(l))
	return n
}
func (m *Service) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovDidDocument(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDidDocument(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovDidDocument(uint64(m.Priority))
	}
	if len(m.RecipientKeys) > 0 {
		for _, s := range m.RecipientKeys {
			l = len(s)
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	if len(m.RoutingKeys) > 0 {
		for _, s := range m.RoutingKeys {
			l = len(s)
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	l = len(m.ServiceEndpoint)
	if l > 0 {
		n += 1 + l + sovDidDocument(uint64(l))
	}
	if len(m.Accept) > 0 {
		for _, s := range m.Accept {
			l = len(s)
			n += 1 + l + sovDidDocument(uint64(l))
		}
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDidDocument(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDidDocument(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDidDocument(uint64(mapEntrySize))
		}
	}
	if len(m.RecipientKeysRelativeURL) > 0 {
		for k, v := range m.RecipientKeysRelativeURL {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDidDocument(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovDidDocument(uint64(mapEntrySize))
		}
	}
	if len(m.RoutingKeysRelativeURL) > 0 {
		for k, v := range m.RoutingKeysRelativeURL {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDidDocument(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovDidDocument(uint64(mapEntrySize))
		}
	}
	if m.RelativeURL {
		n += 2
	}
	return n
}

func sovDidDocument(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDidDocument(x uint64) (n int) {
	return sovDidDocument(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DidDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDidDocument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DidDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DidDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethod = append(m.VerificationMethod, &VerificationMethod{})
			if err := m.VerificationMethod[len(m.VerificationMethod)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = append(m.Service, &Service{})
			if err := m.Service[len(m.Service)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authentication = append(m.Authentication, &VerificationMethod{})
			if err := m.Authentication[len(m.Authentication)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertionMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssertionMethod = append(m.AssertionMethod, &VerificationMethod{})
			if err := m.AssertionMethod[len(m.AssertionMethod)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapabilityDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CapabilityDelegation = append(m.CapabilityDelegation, &VerificationMethod{})
			if err := m.CapabilityDelegation[len(m.CapabilityDelegation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapabilityInvocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CapabilityInvocation = append(m.CapabilityInvocation, &VerificationMethod{})
			if err := m.CapabilityInvocation[len(m.CapabilityInvocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyAgreement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyAgreement = append(m.KeyAgreement, &VerificationMethod{})
			if err := m.KeyAgreement[len(m.KeyAgreement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDidDocument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDidDocument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerificationMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDidDocument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &types.Any{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyJwk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Any{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VerificationMaterial = &VerificationMethod_PublicKeyJwk{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyMultibase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMaterial = &VerificationMethod_PublicKeyMultibase{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeURL", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelativeURL = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDidDocument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDidDocument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDidDocument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientKeys = append(m.RecipientKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoutingKeys = append(m.RoutingKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accept", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accept = append(m.Accept, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDidDocument
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDidDocument
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDidDocument
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDidDocument
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDidDocument
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDidDocument
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDidDocument
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDidDocument(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDidDocument
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientKeysRelativeURL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecipientKeysRelativeURL == nil {
				m.RecipientKeysRelativeURL = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDidDocument
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDidDocument
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDidDocument
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDidDocument
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDidDocument
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDidDocument(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDidDocument
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RecipientKeysRelativeURL[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingKeysRelativeURL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoutingKeysRelativeURL == nil {
				m.RoutingKeysRelativeURL = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDidDocument
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDidDocument
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDidDocument
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDidDocument
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDidDocument
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDidDocument(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDidDocument
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RoutingKeysRelativeURL[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeURL", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelativeURL = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDidDocument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDidDocument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDidDocument(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDidDocument
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDidDocument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDidDocument
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDidDocument
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDidDocument
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDidDocument        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDidDocument          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDidDocument = fmt.Errorf("proto: unexpected end of group")
)
