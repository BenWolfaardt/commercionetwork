// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commercionetwork/did/didPowerUpRequest.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DidPowerUpRequest struct {
	Status   *RequestStatus                           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Claimant string                                   `protobuf:"bytes,2,opt,name=claimant,proto3" json:"claimant,omitempty"`
	Amount   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	Proof    string                                   `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	Id       string                                   `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	ProofKey string                                   `protobuf:"bytes,6,opt,name=proofKey,proto3" json:"proofKey,omitempty"`
}

func (m *DidPowerUpRequest) Reset()         { *m = DidPowerUpRequest{} }
func (m *DidPowerUpRequest) String() string { return proto.CompactTextString(m) }
func (*DidPowerUpRequest) ProtoMessage()    {}
func (*DidPowerUpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01e13c0284f1a13a, []int{0}
}
func (m *DidPowerUpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DidPowerUpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DidPowerUpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DidPowerUpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DidPowerUpRequest.Merge(m, src)
}
func (m *DidPowerUpRequest) XXX_Size() int {
	return m.Size()
}
func (m *DidPowerUpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DidPowerUpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DidPowerUpRequest proto.InternalMessageInfo

func (m *DidPowerUpRequest) GetStatus() *RequestStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DidPowerUpRequest) GetClaimant() string {
	if m != nil {
		return m.Claimant
	}
	return ""
}

func (m *DidPowerUpRequest) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *DidPowerUpRequest) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

func (m *DidPowerUpRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DidPowerUpRequest) GetProofKey() string {
	if m != nil {
		return m.ProofKey
	}
	return ""
}

type RequestStatus struct {
	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RequestStatus) Reset()         { *m = RequestStatus{} }
func (m *RequestStatus) String() string { return proto.CompactTextString(m) }
func (*RequestStatus) ProtoMessage()    {}
func (*RequestStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_01e13c0284f1a13a, []int{1}
}
func (m *RequestStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStatus.Merge(m, src)
}
func (m *RequestStatus) XXX_Size() int {
	return m.Size()
}
func (m *RequestStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStatus proto.InternalMessageInfo

func (m *RequestStatus) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RequestStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*DidPowerUpRequest)(nil), "commercionetwork.commercionetwork.did.DidPowerUpRequest")
	proto.RegisterType((*RequestStatus)(nil), "commercionetwork.commercionetwork.did.RequestStatus")
}

func init() {
	proto.RegisterFile("commercionetwork/did/didPowerUpRequest.proto", fileDescriptor_01e13c0284f1a13a)
}

var fileDescriptor_01e13c0284f1a13a = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0xae, 0xd3, 0x30,
	0x14, 0xc6, 0x93, 0xdc, 0xdb, 0x40, 0x5d, 0x81, 0x84, 0xd5, 0x21, 0xed, 0x90, 0x56, 0x95, 0x90,
	0x32, 0x80, 0x4d, 0x0b, 0x03, 0x0b, 0x4b, 0x61, 0x83, 0x01, 0x05, 0xb1, 0xb0, 0x39, 0x89, 0x1b,
	0xac, 0xd6, 0x39, 0x21, 0x76, 0x28, 0x7d, 0x0b, 0x1e, 0x82, 0x89, 0x27, 0xe9, 0xd8, 0x91, 0x09,
	0x50, 0xfb, 0x22, 0x28, 0x8e, 0x8b, 0xd4, 0x74, 0xb9, 0x43, 0x94, 0xf3, 0xc7, 0xdf, 0xf1, 0xef,
	0x4b, 0x0e, 0x7a, 0x92, 0x82, 0x94, 0xbc, 0x4a, 0x05, 0x14, 0x5c, 0x6f, 0xa1, 0x5a, 0xd3, 0x4c,
	0x64, 0xcd, 0xf3, 0x1e, 0xb6, 0xbc, 0xfa, 0x58, 0xc6, 0xfc, 0x4b, 0xcd, 0x95, 0x26, 0x65, 0x05,
	0x1a, 0xf0, 0xe3, 0xee, 0x69, 0x72, 0x55, 0xc8, 0x44, 0x36, 0x1e, 0xe5, 0x00, 0xf9, 0x86, 0x53,
	0x23, 0x4a, 0xea, 0x15, 0x65, 0xc5, 0xae, 0x9d, 0x30, 0x9e, 0x74, 0x5b, 0x5a, 0x48, 0xae, 0x34,
	0x93, 0xa5, 0x3d, 0x30, 0xcc, 0x21, 0x07, 0x13, 0xd2, 0x26, 0xb2, 0xd5, 0x30, 0x05, 0x25, 0x41,
	0xd1, 0x84, 0x29, 0x4e, 0xbf, 0xce, 0x13, 0xae, 0xd9, 0x9c, 0xa6, 0x20, 0x8a, 0xb6, 0x3f, 0xfb,
	0xe1, 0xa1, 0x47, 0x6f, 0xba, 0xd0, 0xf8, 0x1d, 0xf2, 0x95, 0x66, 0xba, 0x56, 0x81, 0x3b, 0x75,
	0xa3, 0xc1, 0xe2, 0x05, 0xb9, 0x13, 0x3f, 0xb1, 0xfa, 0x0f, 0x46, 0x1b, 0xdb, 0x19, 0x78, 0x8c,
	0xee, 0xa7, 0x1b, 0x26, 0x24, 0x2b, 0x74, 0xe0, 0x4d, 0xdd, 0xa8, 0x1f, 0xff, 0xcf, 0x71, 0x8a,
	0x7c, 0x26, 0xa1, 0x2e, 0x74, 0x70, 0x33, 0xbd, 0x89, 0x06, 0x8b, 0x11, 0x69, 0x81, 0x49, 0x03,
	0x4c, 0x2c, 0x30, 0x79, 0x0d, 0xa2, 0x58, 0x3e, 0xdb, 0xff, 0x9e, 0x38, 0x3f, 0xff, 0x4c, 0xa2,
	0x5c, 0xe8, 0xcf, 0x75, 0xd2, 0x10, 0x50, 0xeb, 0xae, 0x7d, 0x3d, 0x55, 0xd9, 0x9a, 0xea, 0x5d,
	0xc9, 0x95, 0x11, 0xa8, 0xd8, 0x8e, 0xc6, 0x43, 0xd4, 0x2b, 0x2b, 0x80, 0x55, 0x70, 0x6b, 0x6e,
	0x6f, 0x13, 0xfc, 0x10, 0x79, 0x22, 0x0b, 0x7a, 0xa6, 0xe4, 0x89, 0xac, 0xc1, 0x34, 0x8d, 0xb7,
	0x7c, 0x17, 0xf8, 0x2d, 0xe6, 0x39, 0x9f, 0xbd, 0x42, 0x0f, 0x2e, 0xbc, 0x61, 0x8c, 0x6e, 0x9b,
	0x9b, 0xcc, 0xf7, 0xe9, 0xc7, 0x26, 0xc6, 0x01, 0xba, 0x27, 0xb9, 0x52, 0x2c, 0xe7, 0xd6, 0xe6,
	0x39, 0x5d, 0xc6, 0xfb, 0x63, 0xe8, 0x1e, 0x8e, 0xa1, 0xfb, 0xf7, 0x18, 0xba, 0xdf, 0x4f, 0xa1,
	0x73, 0x38, 0x85, 0xce, 0xaf, 0x53, 0xe8, 0x7c, 0x7a, 0x79, 0x61, 0xa6, 0xb3, 0x51, 0x57, 0x85,
	0x6f, 0x66, 0xc9, 0x8c, 0xc5, 0xc4, 0x37, 0x3f, 0xf0, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x02, 0xfc, 0x29, 0x92, 0x89, 0x02, 0x00, 0x00,
}

func (m *DidPowerUpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DidPowerUpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DidPowerUpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofKey) > 0 {
		i -= len(m.ProofKey)
		copy(dAtA[i:], m.ProofKey)
		i = encodeVarintDidPowerUpRequest(dAtA, i, uint64(len(m.ProofKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDidPowerUpRequest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintDidPowerUpRequest(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDidPowerUpRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Claimant) > 0 {
		i -= len(m.Claimant)
		copy(dAtA[i:], m.Claimant)
		i = encodeVarintDidPowerUpRequest(dAtA, i, uint64(len(m.Claimant)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDidPowerUpRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDidPowerUpRequest(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDidPowerUpRequest(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDidPowerUpRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovDidPowerUpRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DidPowerUpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDidPowerUpRequest(uint64(l))
	}
	l = len(m.Claimant)
	if l > 0 {
		n += 1 + l + sovDidPowerUpRequest(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovDidPowerUpRequest(uint64(l))
		}
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovDidPowerUpRequest(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDidPowerUpRequest(uint64(l))
	}
	l = len(m.ProofKey)
	if l > 0 {
		n += 1 + l + sovDidPowerUpRequest(uint64(l))
	}
	return n
}

func (m *RequestStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDidPowerUpRequest(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDidPowerUpRequest(uint64(l))
	}
	return n
}

func sovDidPowerUpRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDidPowerUpRequest(x uint64) (n int) {
	return sovDidPowerUpRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DidPowerUpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDidPowerUpRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DidPowerUpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DidPowerUpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidPowerUpRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RequestStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidPowerUpRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidPowerUpRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidPowerUpRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidPowerUpRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidPowerUpRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDidPowerUpRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDidPowerUpRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidPowerUpRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidPowerUpRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDidPowerUpRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDidPowerUpRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDidPowerUpRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDidPowerUpRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDidPowerUpRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDidPowerUpRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDidPowerUpRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDidPowerUpRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDidPowerUpRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDidPowerUpRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDidPowerUpRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDidPowerUpRequest = fmt.Errorf("proto: unexpected end of group")
)
