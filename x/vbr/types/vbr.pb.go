// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commercionetwork/vbr/vbr.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VbrPool struct {
	Amount github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"amount" yaml:"amount"`
}

func (m *VbrPool) Reset()         { *m = VbrPool{} }
func (m *VbrPool) String() string { return proto.CompactTextString(m) }
func (*VbrPool) ProtoMessage()    {}
func (*VbrPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f117998702db8c, []int{0}
}
func (m *VbrPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VbrPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VbrPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VbrPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VbrPool.Merge(m, src)
}
func (m *VbrPool) XXX_Size() int {
	return m.Size()
}
func (m *VbrPool) XXX_DiscardUnknown() {
	xxx_messageInfo_VbrPool.DiscardUnknown(m)
}

var xxx_messageInfo_VbrPool proto.InternalMessageInfo

func (m *VbrPool) GetAmount() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type VbrAutoW struct {
	AutoW bool `protobuf:"varint,1,opt,name=autoW,proto3" json:"autoW,omitempty" yaml:"autoW"`
}

func (m *VbrAutoW) Reset()         { *m = VbrAutoW{} }
func (m *VbrAutoW) String() string { return proto.CompactTextString(m) }
func (*VbrAutoW) ProtoMessage()    {}
func (*VbrAutoW) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f117998702db8c, []int{1}
}
func (m *VbrAutoW) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VbrAutoW) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VbrAutoW.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VbrAutoW) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VbrAutoW.Merge(m, src)
}
func (m *VbrAutoW) XXX_Size() int {
	return m.Size()
}
func (m *VbrAutoW) XXX_DiscardUnknown() {
	xxx_messageInfo_VbrAutoW.DiscardUnknown(m)
}

var xxx_messageInfo_VbrAutoW proto.InternalMessageInfo

func (m *VbrAutoW) GetAutoW() bool {
	if m != nil {
		return m.AutoW
	}
	return false
}

type VbrRewardrate struct {
	RewardRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=rewardRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rewardRate" yaml:"rewardRate"`
}

func (m *VbrRewardrate) Reset()         { *m = VbrRewardrate{} }
func (m *VbrRewardrate) String() string { return proto.CompactTextString(m) }
func (*VbrRewardrate) ProtoMessage()    {}
func (*VbrRewardrate) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f117998702db8c, []int{2}
}
func (m *VbrRewardrate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VbrRewardrate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VbrRewardrate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VbrRewardrate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VbrRewardrate.Merge(m, src)
}
func (m *VbrRewardrate) XXX_Size() int {
	return m.Size()
}
func (m *VbrRewardrate) XXX_DiscardUnknown() {
	xxx_messageInfo_VbrRewardrate.DiscardUnknown(m)
}

var xxx_messageInfo_VbrRewardrate proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VbrPool)(nil), "commercionetwork.commercionetwork.vbr.VbrPool")
	proto.RegisterType((*VbrAutoW)(nil), "commercionetwork.commercionetwork.vbr.VbrAutoW")
	proto.RegisterType((*VbrRewardrate)(nil), "commercionetwork.commercionetwork.vbr.VbrRewardrate")
}

func init() { proto.RegisterFile("commercionetwork/vbr/vbr.proto", fileDescriptor_f2f117998702db8c) }

var fileDescriptor_f2f117998702db8c = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x13, 0x2e, 0xb7, 0xb7, 0x77, 0xb4, 0xa0, 0xc1, 0x45, 0x29, 0x32, 0x29, 0x03, 0x96,
	0x82, 0x98, 0xa1, 0x75, 0x23, 0xee, 0x4c, 0xfb, 0x00, 0x92, 0x45, 0x05, 0x77, 0x33, 0xe9, 0x50,
	0x43, 0x9b, 0x9c, 0x32, 0x99, 0xb6, 0xd6, 0xbd, 0x7b, 0x9f, 0xc3, 0x27, 0xe9, 0xb2, 0x4b, 0x71,
	0x11, 0xa5, 0x7d, 0x83, 0x3e, 0x81, 0x4c, 0x26, 0xa2, 0xb6, 0x1b, 0x17, 0x21, 0x67, 0xce, 0xe1,
	0x3b, 0xdf, 0x81, 0x1f, 0xe1, 0x10, 0xe2, 0x58, 0xc8, 0x30, 0x82, 0x44, 0xa8, 0x19, 0xc8, 0x21,
	0x9d, 0x72, 0xa9, 0x3f, 0x6f, 0x2c, 0x41, 0x81, 0x73, 0xb2, 0x3d, 0xf7, 0x76, 0x1a, 0x53, 0x2e,
	0x6b, 0x47, 0x03, 0x18, 0x40, 0x4e, 0x50, 0x5d, 0x19, 0xb8, 0x86, 0x43, 0x48, 0x63, 0x48, 0x29,
	0x67, 0xa9, 0xa0, 0xd3, 0x16, 0x17, 0x8a, 0xb5, 0x68, 0x08, 0x51, 0x62, 0xe6, 0xe4, 0xd1, 0x46,
	0xff, 0x7a, 0x5c, 0x5e, 0x03, 0x8c, 0x9c, 0x07, 0x54, 0x62, 0x31, 0x4c, 0x12, 0x55, 0xb5, 0xeb,
	0x7f, 0x9a, 0x7b, 0xed, 0x63, 0xcf, 0xc0, 0x9e, 0x86, 0xbd, 0x02, 0xf6, 0xba, 0x22, 0xec, 0x40,
	0x94, 0xf8, 0xdd, 0x45, 0xe6, 0x5a, 0x9b, 0xcc, 0xad, 0xcc, 0x59, 0x3c, 0xba, 0x24, 0x86, 0x24,
	0xcf, 0x6f, 0xee, 0xe9, 0x20, 0x52, 0x77, 0x13, 0xae, 0xaf, 0xa4, 0x85, 0xdd, 0xfc, 0xce, 0xd2,
	0xfe, 0x90, 0xaa, 0xf9, 0x58, 0xa4, 0x9f, 0x4b, 0xd2, 0xa0, 0x30, 0x92, 0x36, 0x2a, 0xf7, 0xb8,
	0xbc, 0x9a, 0x28, 0xb8, 0x71, 0x1a, 0xe8, 0x2f, 0xd3, 0x45, 0xd5, 0xae, 0xdb, 0xcd, 0xb2, 0x7f,
	0xb0, 0xc9, 0xdc, 0xfd, 0x42, 0xa2, 0xdb, 0x24, 0x30, 0x63, 0xa2, 0x50, 0xa5, 0xc7, 0x65, 0x20,
	0x66, 0x4c, 0xf6, 0x25, 0x53, 0xc2, 0x09, 0x11, 0x92, 0xf9, 0x2b, 0x60, 0x4a, 0xe4, 0xf4, 0x7f,
	0xbf, 0xa3, 0xcf, 0x7c, 0xcd, 0xdc, 0xc6, 0xef, 0xae, 0xda, 0x64, 0xee, 0xa1, 0x71, 0x7d, 0x6d,
	0x22, 0xc1, 0xb7, 0xb5, 0x7e, 0xb0, 0x58, 0x61, 0x7b, 0xb9, 0xc2, 0xf6, 0xfb, 0x0a, 0xdb, 0x4f,
	0x6b, 0x6c, 0x2d, 0xd7, 0xd8, 0x7a, 0x59, 0x63, 0xeb, 0xf6, 0xe2, 0x87, 0x62, 0x2b, 0xd3, 0x9d,
	0xc6, 0x7d, 0x1e, 0x73, 0x2e, 0xe6, 0xa5, 0x3c, 0x8c, 0xf3, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x21, 0xe2, 0x32, 0xeb, 0x0b, 0x02, 0x00, 0x00,
}

func (m *VbrPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VbrPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VbrPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVbr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VbrAutoW) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VbrAutoW) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VbrAutoW) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoW {
		i--
		if m.AutoW {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VbrRewardrate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VbrRewardrate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VbrRewardrate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardRate.Size()
		i -= size
		if _, err := m.RewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVbr(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintVbr(dAtA []byte, offset int, v uint64) int {
	offset -= sovVbr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VbrPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovVbr(uint64(l))
		}
	}
	return n
}

func (m *VbrAutoW) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoW {
		n += 2
	}
	return n
}

func (m *VbrRewardrate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardRate.Size()
	n += 1 + l + sovVbr(uint64(l))
	return n
}

func sovVbr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVbr(x uint64) (n int) {
	return sovVbr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VbrPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVbr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VbrPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VbrPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVbr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVbr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVbr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.DecCoin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVbr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVbr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VbrAutoW) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVbr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VbrAutoW: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VbrAutoW: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoW", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVbr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoW = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVbr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVbr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VbrRewardrate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVbr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VbrRewardrate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VbrRewardrate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVbr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVbr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVbr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVbr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVbr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVbr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVbr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVbr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVbr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVbr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVbr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVbr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVbr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVbr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVbr = fmt.Errorf("proto: unexpected end of group")
)
